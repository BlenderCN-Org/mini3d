
// -- THIS FILE IS AUTOGENERATED USING THE SCRIPT GLWRAPPERS.PY --

// Copyright (c) <2012> Daniel Peterson
// This file is part of Mini3D <www.mini3d.org>
// It is distributed under the MIT Software License <www.mini3d.org/license.php>


#ifdef _WIN32

#include "../openglwrapper.hpp"
#include "../common/glext.h"


void mini3d_assert(bool expression, const char* text, ...);

namespace mini3d {
namespace graphics {

////////// OPENGL 1.0 ///////////

////////// OPENGL 1.2 ///////////
PFNGLDRAWRANGEELEMENTSPROC _glDrawRangeElements;

////////// OPENGL 1.3 ///////////
PFNGLACTIVETEXTUREPROC _glActiveTexture;
PFNGLGENERATEMIPMAPPROC _glGenerateMipmap;
PFNGLCOMPRESSEDTEXIMAGE2DPROC _glCompressedTexImage2D;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC _glCompressedTexSubImage2D;

////////// OPENGL 1.5 ///////////
PFNGLDELETEBUFFERSPROC _glDeleteBuffers;
PFNGLGENBUFFERSPROC _glGenBuffers;
PFNGLBINDBUFFERPROC _glBindBuffer;
PFNGLMAPBUFFERPROC _glMapBuffer;
PFNGLUNMAPBUFFERPROC _glUnmapBuffer;
PFNGLBUFFERDATAPROC _glBufferData;
PFNGLGETBUFFERSUBDATAPROC _glGetBufferSubData;

////////// OPENGL 2.0 ///////////
PFNGLISSHADERPROC _glIsShader;
PFNGLCREATESHADERPROC _glCreateShader;
PFNGLDELETESHADERPROC _glDeleteShader;
PFNGLATTACHSHADERPROC _glAttachShader;
PFNGLSHADERSOURCEPROC _glShaderSource;
PFNGLGETSHADERSOURCEPROC _glGetShaderSource;
PFNGLCOMPILESHADERPROC _glCompileShader;
PFNGLGETSHADERIVPROC _glGetShaderiv;
PFNGLGETSHADERINFOLOGPROC _glGetShaderInfoLog;
PFNGLCREATEPROGRAMPROC _glCreateProgram;
PFNGLDELETEPROGRAMPROC _glDeleteProgram;
PFNGLLINKPROGRAMPROC _glLinkProgram;
PFNGLUSEPROGRAMPROC _glUseProgram;
PFNGLGETPROGRAMIVPROC _glGetProgramiv;
PFNGLGETPROGRAMINFOLOGPROC _glGetProgramInfoLog;
PFNGLVALIDATEPROGRAMPROC _glValidateProgram;
PFNGLGETATTRIBLOCATIONPROC _glGetAttribLocation;
PFNGLBINDATTRIBLOCATIONPROC _glBindAttribLocation;
PFNGLGETACTIVEATTRIBPROC _glGetActiveAttrib;
PFNGLUNIFORM1FVPROC _glUniform1fv;
PFNGLUNIFORM2FVPROC _glUniform2fv;
PFNGLUNIFORM3FVPROC _glUniform3fv;
PFNGLUNIFORM4FVPROC _glUniform4fv;
PFNGLUNIFORM1IPROC _glUniform1i;
PFNGLUNIFORM2IPROC _glUniform2i;
PFNGLUNIFORM3IPROC _glUniform3i;
PFNGLUNIFORM4IPROC _glUniform4i;
PFNGLUNIFORM4IVPROC _glUniform4iv;
PFNGLUNIFORMMATRIX4FVPROC _glUniformMatrix4fv;
PFNGLGETUNIFORMLOCATIONPROC _glGetUniformLocation;
PFNGLGETACTIVEUNIFORMPROC _glGetActiveUniform;
PFNGLVERTEXATTRIBPOINTERPROC _glVertexAttribPointer;
PFNGLDISABLEVERTEXATTRIBARRAYPROC _glDisableVertexAttribArray;
PFNGLENABLEVERTEXATTRIBARRAYPROC _glEnableVertexAttribArray;

////////// OPENGL 3.1 ///////////
PFNGLDRAWELEMENTSINSTANCEDPROC _glDrawElementsInstanced;

////////// OPENGL 3.3 ///////////
PFNGLVERTEXATTRIBDIVISORPROC _glVertexAttribDivisor;

////////// OPENGL 4.2 ///////////
PFNGLGENRENDERBUFFERSPROC _glGenRenderbuffers;
PFNGLGENRENDERBUFFERSEXTPROC _glGenRenderbuffersEXT;
PFNGLBINDRENDERBUFFERPROC _glBindRenderbuffer;
PFNGLBINDRENDERBUFFEREXTPROC _glBindRenderbufferEXT;
PFNGLDELETERENDERBUFFERSPROC _glDeleteRenderbuffers;
PFNGLDELETERENDERBUFFERSEXTPROC _glDeleteRenderbuffersEXT;
PFNGLRENDERBUFFERSTORAGEPROC _glRenderbufferStorage;
PFNGLRENDERBUFFERSTORAGEEXTPROC _glRenderbufferStorageEXT;
PFNGLGENFRAMEBUFFERSPROC _glGenFramebuffers;
PFNGLGENFRAMEBUFFERSEXTPROC _glGenFramebuffersEXT;
PFNGLBINDFRAMEBUFFERPROC _glBindFramebuffer;
PFNGLBINDFRAMEBUFFEREXTPROC _glBindFramebufferEXT;
PFNGLDELETEFRAMEBUFFERSPROC _glDeleteFramebuffers;
PFNGLDELETEFRAMEBUFFERSEXTPROC _glDeleteFramebuffersEXT;
PFNGLCHECKFRAMEBUFFERSTATUSPROC _glCheckFramebufferStatus;
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC _glCheckFramebufferStatusEXT;
PFNGLFRAMEBUFFERTEXTURE2DPROC _glFramebufferTexture2D;
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC _glFramebufferTexture2DEXT;
PFNGLFRAMEBUFFERRENDERBUFFERPROC _glFramebufferRenderbuffer;
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC _glFramebufferRenderbufferEXT;

void initOpenGL()
{
    ////////// OPENGL 1.0 ///////////

    ////////// OPENGL 1.2 ///////////
    _glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)wglGetProcAddress("glDrawRangeElements");

    ////////// OPENGL 1.3 ///////////
    _glActiveTexture = (PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture");
    _glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)wglGetProcAddress("glGenerateMipmap");
    _glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)wglGetProcAddress("glCompressedTexImage2D");
    _glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)wglGetProcAddress("glCompressedTexSubImage2D");

    ////////// OPENGL 1.5 ///////////
    _glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)wglGetProcAddress("glDeleteBuffers");
    _glGenBuffers = (PFNGLGENBUFFERSPROC)wglGetProcAddress("glGenBuffers");
    _glBindBuffer = (PFNGLBINDBUFFERPROC)wglGetProcAddress("glBindBuffer");
    _glMapBuffer = (PFNGLMAPBUFFERPROC)wglGetProcAddress("glMapBuffer");
    _glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)wglGetProcAddress("glUnmapBuffer");
    _glBufferData = (PFNGLBUFFERDATAPROC)wglGetProcAddress("glBufferData");
    _glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)wglGetProcAddress("glGetBufferSubData");

    ////////// OPENGL 2.0 ///////////
    _glIsShader = (PFNGLISSHADERPROC)wglGetProcAddress("glIsShader");
    _glCreateShader = (PFNGLCREATESHADERPROC)wglGetProcAddress("glCreateShader");
    _glDeleteShader = (PFNGLDELETESHADERPROC)wglGetProcAddress("glDeleteShader");
    _glAttachShader = (PFNGLATTACHSHADERPROC)wglGetProcAddress("glAttachShader");
    _glShaderSource = (PFNGLSHADERSOURCEPROC)wglGetProcAddress("glShaderSource");
    _glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)wglGetProcAddress("glGetShaderSource");
    _glCompileShader = (PFNGLCOMPILESHADERPROC)wglGetProcAddress("glCompileShader");
    _glGetShaderiv = (PFNGLGETSHADERIVPROC)wglGetProcAddress("glGetShaderiv");
    _glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)wglGetProcAddress("glGetShaderInfoLog");
    _glCreateProgram = (PFNGLCREATEPROGRAMPROC)wglGetProcAddress("glCreateProgram");
    _glDeleteProgram = (PFNGLDELETEPROGRAMPROC)wglGetProcAddress("glDeleteProgram");
    _glLinkProgram = (PFNGLLINKPROGRAMPROC)wglGetProcAddress("glLinkProgram");
    _glUseProgram = (PFNGLUSEPROGRAMPROC)wglGetProcAddress("glUseProgram");
    _glGetProgramiv = (PFNGLGETPROGRAMIVPROC)wglGetProcAddress("glGetProgramiv");
    _glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)wglGetProcAddress("glGetProgramInfoLog");
    _glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)wglGetProcAddress("glValidateProgram");
    _glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)wglGetProcAddress("glGetAttribLocation");
    _glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)wglGetProcAddress("glBindAttribLocation");
    _glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)wglGetProcAddress("glGetActiveAttrib");
    _glUniform1fv = (PFNGLUNIFORM1FVPROC)wglGetProcAddress("glUniform1fv");
    _glUniform2fv = (PFNGLUNIFORM2FVPROC)wglGetProcAddress("glUniform2fv");
    _glUniform3fv = (PFNGLUNIFORM3FVPROC)wglGetProcAddress("glUniform3fv");
    _glUniform4fv = (PFNGLUNIFORM4FVPROC)wglGetProcAddress("glUniform4fv");
    _glUniform1i = (PFNGLUNIFORM1IPROC)wglGetProcAddress("glUniform1i");
    _glUniform2i = (PFNGLUNIFORM2IPROC)wglGetProcAddress("glUniform2i");
    _glUniform3i = (PFNGLUNIFORM3IPROC)wglGetProcAddress("glUniform3i");
    _glUniform4i = (PFNGLUNIFORM4IPROC)wglGetProcAddress("glUniform4i");
    _glUniform4iv = (PFNGLUNIFORM4IVPROC)wglGetProcAddress("glUniform4iv");
    _glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)wglGetProcAddress("glUniformMatrix4fv");
    _glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)wglGetProcAddress("glGetUniformLocation");
    _glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)wglGetProcAddress("glGetActiveUniform");
    _glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)wglGetProcAddress("glVertexAttribPointer");
    _glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)wglGetProcAddress("glDisableVertexAttribArray");
    _glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)wglGetProcAddress("glEnableVertexAttribArray");

    ////////// OPENGL 3.1 ///////////
    _glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)wglGetProcAddress("glDrawElementsInstanced");

    ////////// OPENGL 3.3 ///////////
    _glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)wglGetProcAddress("glVertexAttribDivisor");

    ////////// OPENGL 4.2 ///////////
    _glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)wglGetProcAddress("glGenRenderbuffers");
    _glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)wglGetProcAddress("glGenRenderbuffers");
    _glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)wglGetProcAddress("glBindRenderbuffer");
    _glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)wglGetProcAddress("glBindRenderbuffer");
    _glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)wglGetProcAddress("glDeleteRenderbuffers");
    _glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)wglGetProcAddress("glDeleteRenderbuffers");
    _glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)wglGetProcAddress("glRenderbufferStorage");
    _glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)wglGetProcAddress("glRenderbufferStorage");
    _glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)wglGetProcAddress("glGenFramebuffers");
    _glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)wglGetProcAddress("glGenFramebuffers");
    _glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)wglGetProcAddress("glBindFramebuffer");
    _glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)wglGetProcAddress("glBindFramebuffer");
    _glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)wglGetProcAddress("glDeleteFramebuffers");
    _glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)wglGetProcAddress("glDeleteFramebuffers");
    _glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)wglGetProcAddress("glCheckFramebufferStatus");
    _glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)wglGetProcAddress("glCheckFramebufferStatus");
    _glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)wglGetProcAddress("glFramebufferTexture2D");
    _glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)wglGetProcAddress("glFramebufferTexture2D");
    _glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)wglGetProcAddress("glFramebufferRenderbuffer");
    _glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)wglGetProcAddress("glFramebufferRenderbuffer");
}

////////// OPENGL 1.0 ///////////
GLenum glGetError() { return ::glGetError(); }
const GLubyte* glGetString(GLenum name) { return ::glGetString(name); }
void glBindTexture(GLenum target, GLuint texture) { ::glBindTexture(target, texture); }
void glTexParameteri(GLenum target, GLenum pname, GLint param) { ::glTexParameteri(target, pname, param); }
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) { ::glGetTexParameteriv(target, pname, params); }
void glGenTextures(GLsizei n, GLuint *textures) { ::glGenTextures(n, textures); }
void glDeleteTextures(GLsizei n, const GLuint *textures) { ::glDeleteTextures(n, textures); }
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) { ::glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) { ::glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *img) { ::glGetTexImage(target, level, format, type, img); }
void glDrawBuffer(GLenum mode) { ::glDrawBuffer(mode); }
void glReadBuffer(GLenum mode) { ::glReadBuffer(mode); }
void glEnable(GLenum cap) { ::glEnable(cap); }
void glDisable(GLenum cap) { ::glDisable(cap); }
void glClear(GLbitfield mask) { ::glClear(mask); }
void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) { ::glClearColor(red, green, blue, alpha); }
void glClearDepth(GLclampf depth) { ::glClearDepth(depth); }
void glShadeModel(GLenum mode) { ::glShadeModel(mode); }
void glDepthFunc(GLenum func) { ::glDepthFunc(func); }
void glGetIntegerv(GLenum pname, GLint *params) { ::glGetIntegerv(pname, params); }
void glCullFace(GLenum mode) { ::glCullFace(mode); }
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) { ::glDrawElements(mode, count, type, indices); }
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height) { ::glViewport(x, y, width, height); }

    ////////// OPENGL 1.2 ///////////
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) { _glDrawRangeElements(mode, start, end, count, type, indices); }

    ////////// OPENGL 1.3 ///////////
void glActiveTexture(GLenum texture) { _glActiveTexture(texture); }
void glGenerateMipmap(GLenum target) { _glGenerateMipmap(target); }
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) { _glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) { _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }

    ////////// OPENGL 1.5 ///////////
void glDeleteBuffers(GLsizei n, const GLuint *buffers) { _glDeleteBuffers(n, buffers); }
void glGenBuffers(GLsizei n, GLuint *buffers) { _glGenBuffers(n, buffers); }
void glBindBuffer(GLenum target, GLuint buffer) { _glBindBuffer(target, buffer); }
GLvoid* glMapBuffer(GLenum target, GLenum access) { return _glMapBuffer(target, access); }
GLboolean glUnmapBuffer(GLenum target) { return _glUnmapBuffer(target); }
void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage) { _glBufferData(target, size, data, usage); }
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data) { _glGetBufferSubData(target, offset, size, data); }

    ////////// OPENGL 2.0 ///////////
GLboolean glIsShader(GLuint shader) { return _glIsShader(shader); }
GLuint glCreateShader(GLenum type) { return _glCreateShader(type); }
void glDeleteShader(GLuint shader) { _glDeleteShader(shader); }
void glAttachShader(GLuint program, GLuint shader) { _glAttachShader(program, shader); }
void glShaderSource(GLuint shader, GLsizei count, const GLchar* *string, const GLint *length) { _glShaderSource(shader, count, string, length); }
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) { _glGetShaderSource(shader, bufSize, length, source); }
void glCompileShader(GLuint shader) { _glCompileShader(shader); }
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params) { _glGetShaderiv(shader, pname, params); }
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { _glGetShaderInfoLog(shader, bufSize, length, infoLog); }
GLuint glCreateProgram() { return _glCreateProgram(); }
void glDeleteProgram(GLuint program) { _glDeleteProgram(program); }
void glLinkProgram(GLuint program) { _glLinkProgram(program); }
void glUseProgram(GLuint program) { _glUseProgram(program); }
void glGetProgramiv(GLuint program, GLenum pname, GLint *params) { _glGetProgramiv(program, pname, params); }
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { _glGetProgramInfoLog(program, bufSize, length, infoLog); }
void glValidateProgram(GLuint program) { _glValidateProgram(program); }
GLint glGetAttribLocation(GLuint program, const GLchar *name) { return _glGetAttribLocation(program, name); }
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) { _glBindAttribLocation(program, index, name); }
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { _glGetActiveAttrib(program, index, bufSize, length, size, type, name); }
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value) { _glUniform1fv(location, count, value); }
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value) { _glUniform2fv(location, count, value); }
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value) { _glUniform3fv(location, count, value); }
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value) { _glUniform4fv(location, count, value); }
void glUniform1i(GLint location, GLint v0) { _glUniform1i(location, v0); }
void glUniform2i(GLint location, GLint v0, GLint v1) { _glUniform2i(location, v0, v1); }
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { _glUniform3i(location, v0, v1, v2); }
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { _glUniform4i(location, v0, v1, v2, v3); }
void glUniform4iv(GLint location, GLsizei count, const GLint *value) { _glUniform4iv(location, count, value); }
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { _glUniformMatrix4fv(location, count, transpose, value); }
GLint glGetUniformLocation(GLuint program, const GLchar *name) { return _glGetUniformLocation(program, name); }
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { _glGetActiveUniform(program, index, bufSize, length, size, type, name); }
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) { _glVertexAttribPointer(index, size, type, normalized, stride, pointer); }
void glDisableVertexAttribArray(GLuint index) { _glDisableVertexAttribArray(index); }
void glEnableVertexAttribArray(GLuint index) { _glEnableVertexAttribArray(index); }

    ////////// OPENGL 3.1 ///////////
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount) { _glDrawElementsInstanced(mode, count, type, indices, primcount); }

    ////////// OPENGL 3.3 ///////////
void glVertexAttribDivisor(GLuint index, GLuint divisor) { _glVertexAttribDivisor(index, divisor); }

    ////////// OPENGL 4.2 ///////////
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
    if (_glGenRenderbuffers)  _glGenRenderbuffers(n, renderbuffers);
    else if (_glGenRenderbuffersEXT)  _glGenRenderbuffersEXT(n, renderbuffers);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
    if (_glBindRenderbuffer)  _glBindRenderbuffer(target, renderbuffer);
    else if (_glBindRenderbufferEXT)  _glBindRenderbufferEXT(target, renderbuffer);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
    if (_glDeleteRenderbuffers)  _glDeleteRenderbuffers(n, renderbuffers);
    else if (_glDeleteRenderbuffersEXT)  _glDeleteRenderbuffersEXT(n, renderbuffers);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    if (_glRenderbufferStorage)  _glRenderbufferStorage(target, internalformat, width, height);
    else if (_glRenderbufferStorageEXT)  _glRenderbufferStorageEXT(target, internalformat, width, height);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
    if (_glGenFramebuffers)  _glGenFramebuffers(n, framebuffers);
    else if (_glGenFramebuffersEXT)  _glGenFramebuffersEXT(n, framebuffers);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glBindFramebuffer(GLenum target, GLuint framebuffer)
{
    if (_glBindFramebuffer)  _glBindFramebuffer(target, framebuffer);
    else if (_glBindFramebufferEXT)  _glBindFramebufferEXT(target, framebuffer);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
    if (_glDeleteFramebuffers)  _glDeleteFramebuffers(n, framebuffers);
    else if (_glDeleteFramebuffersEXT)  _glDeleteFramebuffersEXT(n, framebuffers);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

GLenum glCheckFramebufferStatus(GLenum target)
{
    if (_glCheckFramebufferStatus) return _glCheckFramebufferStatus(target);
    else if (_glCheckFramebufferStatusEXT) return _glCheckFramebufferStatusEXT(target);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
    return 0;
}

void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    if (_glFramebufferTexture2D)  _glFramebufferTexture2D(target, attachment, textarget, texture, level);
    else if (_glFramebufferTexture2DEXT)  _glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    if (_glFramebufferRenderbuffer)  _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    else if (_glFramebufferRenderbufferEXT)  _glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

}
}

#endif
