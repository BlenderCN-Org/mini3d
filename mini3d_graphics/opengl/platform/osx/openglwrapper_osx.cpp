
// -- THIS FILE IS AUTOGENERATED USING THE SCRIPT GLWRAPPERS.PY --

// Copyright (c) <2012> Daniel Peterson
// This file is part of Mini3D <www.mini3d.org>
// It is distributed under the MIT Software License <www.mini3d.org/license.php>


#ifdef __APPLE__
#import "TargetConditionals.h"

#if !TARGET_OS_IPHONE && !TARGET_IPHONE_SIMULATOR

#define GL_GLEXT_FUNCTION_POINTERS 1
#include "../openglwrapper.hpp"

#import <mach-o/dyld.h>
#import <stdlib.h>
#import <string.h>

void mini3d_assert(bool expression, const char* text, ...);

static void * NSglGetProcAddress (const char *name)
{
    NSSymbol symbol;
    char *symbolName;
    symbolName = (char*)malloc (strlen (name) + 2); // 1
    strcpy(symbolName + 1, name); // 2
    symbolName[0] = '_'; // 3
    symbol = NULL;
    if (NSIsSymbolNameDefined (symbolName)) // 4
        symbol = NSLookupAndBindSymbol (symbolName);
    free (symbolName); // 5
    return symbol ? NSAddressOfSymbol (symbol) : NULL; // 6
}

namespace mini3d {
namespace graphics {
        
////////// OPENGL 1.0 ///////////
glGetErrorProcPtr _glGetError;
glGetStringProcPtr _glGetString;
glBindTextureProcPtr _glBindTexture;
glTexParameteriProcPtr _glTexParameteri;
glGetTexParameterivProcPtr _glGetTexParameteriv;
glGenTexturesProcPtr _glGenTextures;
glDeleteTexturesProcPtr _glDeleteTextures;
glTexImage2DProcPtr _glTexImage2D;
glTexSubImage2DProcPtr _glTexSubImage2D;
glGetTexImageProcPtr _glGetTexImage;
glDrawBufferProcPtr _glDrawBuffer;
glReadBufferProcPtr _glReadBuffer;
glEnableProcPtr _glEnable;
glDisableProcPtr _glDisable;
glClearProcPtr _glClear;
glClearColorProcPtr _glClearColor;
glClearDepthProcPtr _glClearDepth;
glShadeModelProcPtr _glShadeModel;
glDepthFuncProcPtr _glDepthFunc;
glGetIntegervProcPtr _glGetIntegerv;
glCullFaceProcPtr _glCullFace;
glDrawElementsProcPtr _glDrawElements;
glViewportProcPtr _glViewport;

////////// OPENGL 1.2 ///////////
glDrawRangeElementsProcPtr _glDrawRangeElements;

////////// OPENGL 1.3 ///////////
glActiveTextureProcPtr _glActiveTexture;
glGenerateMipmapProcPtr _glGenerateMipmap;
glCompressedTexImage2DProcPtr _glCompressedTexImage2D;
glCompressedTexSubImage2DProcPtr _glCompressedTexSubImage2D;

////////// OPENGL 1.5 ///////////
glDeleteBuffersProcPtr _glDeleteBuffers;
glGenBuffersProcPtr _glGenBuffers;
glBindBufferProcPtr _glBindBuffer;
glMapBufferProcPtr _glMapBuffer;
glUnmapBufferProcPtr _glUnmapBuffer;
glBufferDataProcPtr _glBufferData;
glGetBufferSubDataProcPtr _glGetBufferSubData;

////////// OPENGL 2.0 ///////////
glIsShaderProcPtr _glIsShader;
glCreateShaderProcPtr _glCreateShader;
glDeleteShaderProcPtr _glDeleteShader;
glAttachShaderProcPtr _glAttachShader;
glShaderSourceProcPtr _glShaderSource;
glGetShaderSourceProcPtr _glGetShaderSource;
glCompileShaderProcPtr _glCompileShader;
glGetShaderivProcPtr _glGetShaderiv;
glGetShaderInfoLogProcPtr _glGetShaderInfoLog;
glCreateProgramProcPtr _glCreateProgram;
glDeleteProgramProcPtr _glDeleteProgram;
glLinkProgramProcPtr _glLinkProgram;
glUseProgramProcPtr _glUseProgram;
glGetProgramivProcPtr _glGetProgramiv;
glGetProgramInfoLogProcPtr _glGetProgramInfoLog;
glValidateProgramProcPtr _glValidateProgram;
glGetAttribLocationProcPtr _glGetAttribLocation;
glBindAttribLocationProcPtr _glBindAttribLocation;
glGetActiveAttribProcPtr _glGetActiveAttrib;
glUniform1fvProcPtr _glUniform1fv;
glUniform2fvProcPtr _glUniform2fv;
glUniform3fvProcPtr _glUniform3fv;
glUniform4fvProcPtr _glUniform4fv;
glUniform1iProcPtr _glUniform1i;
glUniform2iProcPtr _glUniform2i;
glUniform3iProcPtr _glUniform3i;
glUniform4iProcPtr _glUniform4i;
glUniform4ivProcPtr _glUniform4iv;
glUniformMatrix4fvProcPtr _glUniformMatrix4fv;
glGetUniformLocationProcPtr _glGetUniformLocation;
glGetActiveUniformProcPtr _glGetActiveUniform;
glVertexAttribPointerProcPtr _glVertexAttribPointer;
glDisableVertexAttribArrayProcPtr _glDisableVertexAttribArray;
glEnableVertexAttribArrayProcPtr _glEnableVertexAttribArray;

////////// OPENGL 3.1 ///////////
glDrawElementsInstancedARBProcPtr _glDrawElementsInstanced;

////////// OPENGL 3.3 ///////////
glVertexAttribDivisorARBProcPtr _glVertexAttribDivisor;

////////// OPENGL 4.2 ///////////
glGenRenderbuffersProcPtr _glGenRenderbuffers;
glGenRenderbuffersEXTProcPtr _glGenRenderbuffersEXT;
glBindRenderbufferProcPtr _glBindRenderbuffer;
glBindRenderbufferEXTProcPtr _glBindRenderbufferEXT;
glDeleteRenderbuffersProcPtr _glDeleteRenderbuffers;
glDeleteRenderbuffersEXTProcPtr _glDeleteRenderbuffersEXT;
glRenderbufferStorageProcPtr _glRenderbufferStorage;
glRenderbufferStorageEXTProcPtr _glRenderbufferStorageEXT;
glGenFramebuffersProcPtr _glGenFramebuffers;
glGenFramebuffersEXTProcPtr _glGenFramebuffersEXT;
glBindFramebufferProcPtr _glBindFramebuffer;
glBindFramebufferEXTProcPtr _glBindFramebufferEXT;
glDeleteFramebuffersProcPtr _glDeleteFramebuffers;
glDeleteFramebuffersEXTProcPtr _glDeleteFramebuffersEXT;
glCheckFramebufferStatusProcPtr _glCheckFramebufferStatus;
glCheckFramebufferStatusEXTProcPtr _glCheckFramebufferStatusEXT;
glFramebufferTexture2DProcPtr _glFramebufferTexture2D;
glFramebufferTexture2DEXTProcPtr _glFramebufferTexture2DEXT;
glFramebufferRenderbufferProcPtr _glFramebufferRenderbuffer;
glFramebufferRenderbufferEXTProcPtr _glFramebufferRenderbufferEXT;


void initOpenGL()
{
    ////////// OPENGL 1.0 ///////////
    _glGetError = (glGetErrorProcPtr)NSglGetProcAddress("glGetError");
    _glGetString = (glGetStringProcPtr)NSglGetProcAddress("glGetString");
    _glBindTexture = (glBindTextureProcPtr)NSglGetProcAddress("glBindTexture");
    _glTexParameteri = (glTexParameteriProcPtr)NSglGetProcAddress("glTexParameteri");
    _glGetTexParameteriv = (glGetTexParameterivProcPtr)NSglGetProcAddress("glGetTexParameteriv");
    _glGenTextures = (glGenTexturesProcPtr)NSglGetProcAddress("glGenTextures");
    _glDeleteTextures = (glDeleteTexturesProcPtr)NSglGetProcAddress("glDeleteTextures");
    _glTexImage2D = (glTexImage2DProcPtr)NSglGetProcAddress("glTexImage2D");
    _glTexSubImage2D = (glTexSubImage2DProcPtr)NSglGetProcAddress("glTexSubImage2D");
    _glGetTexImage = (glGetTexImageProcPtr)NSglGetProcAddress("glGetTexImage");
    _glDrawBuffer = (glDrawBufferProcPtr)NSglGetProcAddress("glDrawBuffer");
    _glReadBuffer = (glReadBufferProcPtr)NSglGetProcAddress("glReadBuffer");
    _glEnable = (glEnableProcPtr)NSglGetProcAddress("glEnable");
    _glDisable = (glDisableProcPtr)NSglGetProcAddress("glDisable");
    _glClear = (glClearProcPtr)NSglGetProcAddress("glClear");
    _glClearColor = (glClearColorProcPtr)NSglGetProcAddress("glClearColor");
    _glClearDepth = (glClearDepthProcPtr)NSglGetProcAddress("glClearDepth");
    _glShadeModel = (glShadeModelProcPtr)NSglGetProcAddress("glShadeModel");
    _glDepthFunc = (glDepthFuncProcPtr)NSglGetProcAddress("glDepthFunc");
    _glGetIntegerv = (glGetIntegervProcPtr)NSglGetProcAddress("glGetIntegerv");
    _glCullFace = (glCullFaceProcPtr)NSglGetProcAddress("glCullFace");
    _glDrawElements = (glDrawElementsProcPtr)NSglGetProcAddress("glDrawElements");
    _glViewport = (glViewportProcPtr)NSglGetProcAddress("glViewport");

    ////////// OPENGL 1.2 ///////////
    _glDrawRangeElements = (glDrawRangeElementsProcPtr)NSglGetProcAddress("glDrawRangeElements");

    ////////// OPENGL 1.3 ///////////
    _glActiveTexture = (glActiveTextureProcPtr)NSglGetProcAddress("glActiveTexture");
    _glGenerateMipmap = (glGenerateMipmapProcPtr)NSglGetProcAddress("glGenerateMipmap");
    _glCompressedTexImage2D = (glCompressedTexImage2DProcPtr)NSglGetProcAddress("glCompressedTexImage2D");
    _glCompressedTexSubImage2D = (glCompressedTexSubImage2DProcPtr)NSglGetProcAddress("glCompressedTexSubImage2D");

    ////////// OPENGL 1.5 ///////////
    _glDeleteBuffers = (glDeleteBuffersProcPtr)NSglGetProcAddress("glDeleteBuffers");
    _glGenBuffers = (glGenBuffersProcPtr)NSglGetProcAddress("glGenBuffers");
    _glBindBuffer = (glBindBufferProcPtr)NSglGetProcAddress("glBindBuffer");
    _glMapBuffer = (glMapBufferProcPtr)NSglGetProcAddress("glMapBuffer");
    _glUnmapBuffer = (glUnmapBufferProcPtr)NSglGetProcAddress("glUnmapBuffer");
    _glBufferData = (glBufferDataProcPtr)NSglGetProcAddress("glBufferData");
    _glGetBufferSubData = (glGetBufferSubDataProcPtr)NSglGetProcAddress("glGetBufferSubData");

    ////////// OPENGL 2.0 ///////////
    _glIsShader = (glIsShaderProcPtr)NSglGetProcAddress("glIsShader");
    _glCreateShader = (glCreateShaderProcPtr)NSglGetProcAddress("glCreateShader");
    _glDeleteShader = (glDeleteShaderProcPtr)NSglGetProcAddress("glDeleteShader");
    _glAttachShader = (glAttachShaderProcPtr)NSglGetProcAddress("glAttachShader");
    _glShaderSource = (glShaderSourceProcPtr)NSglGetProcAddress("glShaderSource");
    _glGetShaderSource = (glGetShaderSourceProcPtr)NSglGetProcAddress("glGetShaderSource");
    _glCompileShader = (glCompileShaderProcPtr)NSglGetProcAddress("glCompileShader");
    _glGetShaderiv = (glGetShaderivProcPtr)NSglGetProcAddress("glGetShaderiv");
    _glGetShaderInfoLog = (glGetShaderInfoLogProcPtr)NSglGetProcAddress("glGetShaderInfoLog");
    _glCreateProgram = (glCreateProgramProcPtr)NSglGetProcAddress("glCreateProgram");
    _glDeleteProgram = (glDeleteProgramProcPtr)NSglGetProcAddress("glDeleteProgram");
    _glLinkProgram = (glLinkProgramProcPtr)NSglGetProcAddress("glLinkProgram");
    _glUseProgram = (glUseProgramProcPtr)NSglGetProcAddress("glUseProgram");
    _glGetProgramiv = (glGetProgramivProcPtr)NSglGetProcAddress("glGetProgramiv");
    _glGetProgramInfoLog = (glGetProgramInfoLogProcPtr)NSglGetProcAddress("glGetProgramInfoLog");
    _glValidateProgram = (glValidateProgramProcPtr)NSglGetProcAddress("glValidateProgram");
    _glGetAttribLocation = (glGetAttribLocationProcPtr)NSglGetProcAddress("glGetAttribLocation");
    _glBindAttribLocation = (glBindAttribLocationProcPtr)NSglGetProcAddress("glBindAttribLocation");
    _glGetActiveAttrib = (glGetActiveAttribProcPtr)NSglGetProcAddress("glGetActiveAttrib");
    _glUniform1fv = (glUniform1fvProcPtr)NSglGetProcAddress("glUniform1fv");
    _glUniform2fv = (glUniform2fvProcPtr)NSglGetProcAddress("glUniform2fv");
    _glUniform3fv = (glUniform3fvProcPtr)NSglGetProcAddress("glUniform3fv");
    _glUniform4fv = (glUniform4fvProcPtr)NSglGetProcAddress("glUniform4fv");
    _glUniform1i = (glUniform1iProcPtr)NSglGetProcAddress("glUniform1i");
    _glUniform2i = (glUniform2iProcPtr)NSglGetProcAddress("glUniform2i");
    _glUniform3i = (glUniform3iProcPtr)NSglGetProcAddress("glUniform3i");
    _glUniform4i = (glUniform4iProcPtr)NSglGetProcAddress("glUniform4i");
    _glUniform4iv = (glUniform4ivProcPtr)NSglGetProcAddress("glUniform4iv");
    _glUniformMatrix4fv = (glUniformMatrix4fvProcPtr)NSglGetProcAddress("glUniformMatrix4fv");
    _glGetUniformLocation = (glGetUniformLocationProcPtr)NSglGetProcAddress("glGetUniformLocation");
    _glGetActiveUniform = (glGetActiveUniformProcPtr)NSglGetProcAddress("glGetActiveUniform");
    _glVertexAttribPointer = (glVertexAttribPointerProcPtr)NSglGetProcAddress("glVertexAttribPointer");
    _glDisableVertexAttribArray = (glDisableVertexAttribArrayProcPtr)NSglGetProcAddress("glDisableVertexAttribArray");
    _glEnableVertexAttribArray = (glEnableVertexAttribArrayProcPtr)NSglGetProcAddress("glEnableVertexAttribArray");

    ////////// OPENGL 3.1 ///////////
    _glDrawElementsInstanced = (glDrawElementsInstancedARBProcPtr)NSglGetProcAddress("glDrawElementsInstanced");

    ////////// OPENGL 3.3 ///////////
    _glVertexAttribDivisor = (glVertexAttribDivisorARBProcPtr)NSglGetProcAddress("glVertexAttribDivisor");

    ////////// OPENGL 4.2 ///////////
    _glGenRenderbuffers = (glGenRenderbuffersProcPtr)NSglGetProcAddress("glGenRenderbuffers");
    _glGenRenderbuffersEXT = (glGenRenderbuffersEXTProcPtr)NSglGetProcAddress("glGenRenderbuffers");
    _glBindRenderbuffer = (glBindRenderbufferProcPtr)NSglGetProcAddress("glBindRenderbuffer");
    _glBindRenderbufferEXT = (glBindRenderbufferEXTProcPtr)NSglGetProcAddress("glBindRenderbuffer");
    _glDeleteRenderbuffers = (glDeleteRenderbuffersProcPtr)NSglGetProcAddress("glDeleteRenderbuffers");
    _glDeleteRenderbuffersEXT = (glDeleteRenderbuffersEXTProcPtr)NSglGetProcAddress("glDeleteRenderbuffers");
    _glRenderbufferStorage = (glRenderbufferStorageProcPtr)NSglGetProcAddress("glRenderbufferStorage");
    _glRenderbufferStorageEXT = (glRenderbufferStorageEXTProcPtr)NSglGetProcAddress("glRenderbufferStorage");
    _glGenFramebuffers = (glGenFramebuffersProcPtr)NSglGetProcAddress("glGenFramebuffers");
    _glGenFramebuffersEXT = (glGenFramebuffersEXTProcPtr)NSglGetProcAddress("glGenFramebuffers");
    _glBindFramebuffer = (glBindFramebufferProcPtr)NSglGetProcAddress("glBindFramebuffer");
    _glBindFramebufferEXT = (glBindFramebufferEXTProcPtr)NSglGetProcAddress("glBindFramebuffer");
    _glDeleteFramebuffers = (glDeleteFramebuffersProcPtr)NSglGetProcAddress("glDeleteFramebuffers");
    _glDeleteFramebuffersEXT = (glDeleteFramebuffersEXTProcPtr)NSglGetProcAddress("glDeleteFramebuffers");
    _glCheckFramebufferStatus = (glCheckFramebufferStatusProcPtr)NSglGetProcAddress("glCheckFramebufferStatus");
    _glCheckFramebufferStatusEXT = (glCheckFramebufferStatusEXTProcPtr)NSglGetProcAddress("glCheckFramebufferStatus");
    _glFramebufferTexture2D = (glFramebufferTexture2DProcPtr)NSglGetProcAddress("glFramebufferTexture2D");
    _glFramebufferTexture2DEXT = (glFramebufferTexture2DEXTProcPtr)NSglGetProcAddress("glFramebufferTexture2D");
    _glFramebufferRenderbuffer = (glFramebufferRenderbufferProcPtr)NSglGetProcAddress("glFramebufferRenderbuffer");
    _glFramebufferRenderbufferEXT = (glFramebufferRenderbufferEXTProcPtr)NSglGetProcAddress("glFramebufferRenderbuffer");
}

////////// OPENGL 1.0 ///////////
GLenum glGetError() { return _glGetError(); }
const GLubyte* glGetString(GLenum name) { return _glGetString(name); }
void glBindTexture(GLenum target, GLuint texture) { _glBindTexture(target, texture); }
void glTexParameteri(GLenum target, GLenum pname, GLint param) { _glTexParameteri(target, pname, param); }
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) { _glGetTexParameteriv(target, pname, params); }
void glGenTextures(GLsizei n, GLuint *textures) { _glGenTextures(n, textures); }
void glDeleteTextures(GLsizei n, const GLuint *textures) { _glDeleteTextures(n, textures); }
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) { _glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) { _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *img) { _glGetTexImage(target, level, format, type, img); }
void glDrawBuffer(GLenum mode) { _glDrawBuffer(mode); }
void glReadBuffer(GLenum mode) { _glReadBuffer(mode); }
void glEnable(GLenum cap) { _glEnable(cap); }
void glDisable(GLenum cap) { _glDisable(cap); }
void glClear(GLbitfield mask) { _glClear(mask); }
void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) { _glClearColor(red, green, blue, alpha); }
void glClearDepth(GLclampf depth) { _glClearDepth(depth); }
void glShadeModel(GLenum mode) { _glShadeModel(mode); }
void glDepthFunc(GLenum func) { _glDepthFunc(func); }
void glGetIntegerv(GLenum pname, GLint *params) { _glGetIntegerv(pname, params); }
void glCullFace(GLenum mode) { _glCullFace(mode); }
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) { _glDrawElements(mode, count, type, indices); }
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height) { _glViewport(x, y, width, height); }

    ////////// OPENGL 1.2 ///////////
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) { _glDrawRangeElements(mode, start, end, count, type, indices); }

    ////////// OPENGL 1.3 ///////////
void glActiveTexture(GLenum texture) { _glActiveTexture(texture); }
void glGenerateMipmap(GLenum target) { _glGenerateMipmap(target); }
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) { _glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) { _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }

    ////////// OPENGL 1.5 ///////////
void glDeleteBuffers(GLsizei n, const GLuint *buffers) { _glDeleteBuffers(n, buffers); }
void glGenBuffers(GLsizei n, GLuint *buffers) { _glGenBuffers(n, buffers); }
void glBindBuffer(GLenum target, GLuint buffer) { _glBindBuffer(target, buffer); }
GLvoid* glMapBuffer(GLenum target, GLenum access) { return _glMapBuffer(target, access); }
GLboolean glUnmapBuffer(GLenum target) { return _glUnmapBuffer(target); }
void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage) { _glBufferData(target, size, data, usage); }
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data) { _glGetBufferSubData(target, offset, size, data); }

    ////////// OPENGL 2.0 ///////////
GLboolean glIsShader(GLuint shader) { return _glIsShader(shader); }
GLuint glCreateShader(GLenum type) { return _glCreateShader(type); }
void glDeleteShader(GLuint shader) { _glDeleteShader(shader); }
void glAttachShader(GLuint program, GLuint shader) { _glAttachShader(program, shader); }
void glShaderSource(GLuint shader, GLsizei count, const GLchar* *string, const GLint *length) { _glShaderSource(shader, count, string, length); }
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) { _glGetShaderSource(shader, bufSize, length, source); }
void glCompileShader(GLuint shader) { _glCompileShader(shader); }
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params) { _glGetShaderiv(shader, pname, params); }
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { _glGetShaderInfoLog(shader, bufSize, length, infoLog); }
GLuint glCreateProgram() { return _glCreateProgram(); }
void glDeleteProgram(GLuint program) { _glDeleteProgram(program); }
void glLinkProgram(GLuint program) { _glLinkProgram(program); }
void glUseProgram(GLuint program) { _glUseProgram(program); }
void glGetProgramiv(GLuint program, GLenum pname, GLint *params) { _glGetProgramiv(program, pname, params); }
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { _glGetProgramInfoLog(program, bufSize, length, infoLog); }
void glValidateProgram(GLuint program) { _glValidateProgram(program); }
GLint glGetAttribLocation(GLuint program, const GLchar *name) { return _glGetAttribLocation(program, name); }
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) { _glBindAttribLocation(program, index, name); }
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { _glGetActiveAttrib(program, index, bufSize, length, size, type, name); }
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value) { _glUniform1fv(location, count, value); }
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value) { _glUniform2fv(location, count, value); }
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value) { _glUniform3fv(location, count, value); }
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value) { _glUniform4fv(location, count, value); }
void glUniform1i(GLint location, GLint v0) { _glUniform1i(location, v0); }
void glUniform2i(GLint location, GLint v0, GLint v1) { _glUniform2i(location, v0, v1); }
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { _glUniform3i(location, v0, v1, v2); }
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { _glUniform4i(location, v0, v1, v2, v3); }
void glUniform4iv(GLint location, GLsizei count, const GLint *value) { _glUniform4iv(location, count, value); }
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { _glUniformMatrix4fv(location, count, transpose, value); }
GLint glGetUniformLocation(GLuint program, const GLchar *name) { return _glGetUniformLocation(program, name); }
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { _glGetActiveUniform(program, index, bufSize, length, size, type, name); }
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) { _glVertexAttribPointer(index, size, type, normalized, stride, pointer); }
void glDisableVertexAttribArray(GLuint index) { _glDisableVertexAttribArray(index); }
void glEnableVertexAttribArray(GLuint index) { _glEnableVertexAttribArray(index); }

    ////////// OPENGL 3.1 ///////////
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount) { _glDrawElementsInstanced(mode, count, type, indices, primcount); }

    ////////// OPENGL 3.3 ///////////
void glVertexAttribDivisor(GLuint index, GLuint divisor) { _glVertexAttribDivisor(index, divisor); }

    ////////// OPENGL 4.2 ///////////
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
    if (_glGenRenderbuffers)  _glGenRenderbuffers(n, renderbuffers);
    else if (_glGenRenderbuffersEXT)  _glGenRenderbuffersEXT(n, renderbuffers);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
    if (_glBindRenderbuffer)  _glBindRenderbuffer(target, renderbuffer);
    else if (_glBindRenderbufferEXT)  _glBindRenderbufferEXT(target, renderbuffer);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
    if (_glDeleteRenderbuffers)  _glDeleteRenderbuffers(n, renderbuffers);
    else if (_glDeleteRenderbuffersEXT)  _glDeleteRenderbuffersEXT(n, renderbuffers);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    if (_glRenderbufferStorage)  _glRenderbufferStorage(target, internalformat, width, height);
    else if (_glRenderbufferStorageEXT)  _glRenderbufferStorageEXT(target, internalformat, width, height);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
    if (_glGenFramebuffers)  _glGenFramebuffers(n, framebuffers);
    else if (_glGenFramebuffersEXT)  _glGenFramebuffersEXT(n, framebuffers);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glBindFramebuffer(GLenum target, GLuint framebuffer)
{
    if (_glBindFramebuffer)  _glBindFramebuffer(target, framebuffer);
    else if (_glBindFramebufferEXT)  _glBindFramebufferEXT(target, framebuffer);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
    if (_glDeleteFramebuffers)  _glDeleteFramebuffers(n, framebuffers);
    else if (_glDeleteFramebuffersEXT)  _glDeleteFramebuffersEXT(n, framebuffers);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

GLenum glCheckFramebufferStatus(GLenum target)
{
    if (_glCheckFramebufferStatus) return _glCheckFramebufferStatus(target);
    else if (_glCheckFramebufferStatusEXT) return _glCheckFramebufferStatusEXT(target);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
    return 0;
}

void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    if (_glFramebufferTexture2D)  _glFramebufferTexture2D(target, attachment, textarget, texture, level);
    else if (_glFramebufferTexture2DEXT)  _glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    if (_glFramebufferRenderbuffer)  _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    else if (_glFramebufferRenderbufferEXT)  _glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
    else mini3d_assert(false, "OpenGL driver does not support EXT_framebuffer_object");
}

}
}

#endif
#endif

